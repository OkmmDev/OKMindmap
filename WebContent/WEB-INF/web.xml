<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
	<!--
	icon
	Specifies filenames for icons used to represent the parent elements  
	-->
	<!--
	<icon>
	  <small-icon>/images/icons/small.gif</small-icon>
	  <large-icon>/images/icons/large.gif</large-icon>
	</icon>
	-->


	<!--
	display-name
	Specifies a short name for the Web application  
	-->
	<display-name>Welcome to okmindmap.com</display-name>


	<!--
	description
	Provides a description for the Web application  
	-->
	<description>
		Welcome to okmindmap.com
	</description>

	<!--
	distributable
	Indicates that this Web application is programmed to be deployed in a distributed Servlet container  
	-->
	<!--
	<distributable>true</distributable>
	-->



	<!--
	context-param
	Contains the Web applications Servlet context initialization parameters  These are the same as above in the version 2.3  
	-->
	<!--
	<context-param>
	   <param-name>title</param-name>
	   <param-value>Datadisk Web Application Example</param-name>
	</context-param>
	-->
	
	<!-- wait for the upgrade to log4j 2.15.0 -->
	<!-- <context-param>
		<param-name>log4jConfigLocation</param-name>
		<param-value>/WEB-INF/log4j.properties</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener> -->

	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>okmindmap.pop</param-value>
	</context-param>
	


	<!--
	filter
	Declares and configures a filter for the Web app  
	-->
	<filter>
		<filter-name>EncodingFilter</filter-name>
		<filter-class>com.okmindmap.filter.EncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>UTF-8</param-value>
		</init-param>
		<init-param>
			<param-name>forceEncoding</param-name>
			<param-value>true</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>EncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<filter>
		<filter-name>LocaleFilter</filter-name>
		<filter-class>com.okmindmap.filter.LocaleFilter</filter-class>
		<init-param>
			<param-name>cookieName</param-name>
			<param-value>locale</param-value>
		</init-param>
		<init-param>
			<param-name>localeResolver</param-name>
			<param-value>localeResolver</param-value>
		</init-param>
		<!-- 지원되는 언어 들 -->
		<init-param>
			<param-name>locales</param-name>
			<param-value>en,ko,vi</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>LocaleFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
    
    <!--  agentFilter -->
    <filter>
		<filter-name>UserAgentFiter</filter-name>
		<filter-class>com.okmindmap.filter.UserAgentFiter</filter-class>
		<init-param>
			<param-name>attribute</param-name>
			<param-value>agent</param-value>
		</init-param>
		<init-param>
			<param-name>userAgent</param-name>
			<param-value>Android,iPhone,iPad</param-value>
		</init-param>
		<init-param>
			<param-name>cacheSize</param-name>
			<param-value>1024</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>UserAgentFiter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
	<!--  CookieFilter -->
	<filter>
		<filter-name>CookieFilter</filter-name>
		<filter-class>com.okmindmap.filter.CookieFilter</filter-class>
		<init-param>
			<param-name>cookie-age</param-name>
			<param-value>2147483647</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CookieFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- URLRewrite Filter -->
	<!-- http://urlrewritefilter.googlecode.com/svn/trunk/src/doc/manual/3.2/index.html -->
	<!-- http://urlrewritefilter.googlecode.com/svn/trunk/src/doc/manual/3.2/guide.html -->
    <filter>
        <filter-name>UrlRewriteFilter</filter-name>
        <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>

        <!-- set the amount of seconds the conf file will be checked for reload
        can be a valid integer (0 denotes check every time,
        -1 denotes no reload check, default -1) -->
        <init-param>
            <param-name>confReloadCheckInterval</param-name>
            <param-value>60</param-value>
        </init-param>

        <!-- if you need to the conf file path can be changed
        it is specified as a path relative to the root of your context
        (default /WEB-INF/urlrewrite.xml) -->
        <init-param>
            <param-name>confPath</param-name>
            <param-value>/WEB-INF/urlrewrite.xml</param-value>
        </init-param>

        <!-- sets up log level (will be logged to context log)
        can be: TRACE, DEBUG, INFO (default), WARN, ERROR, FATAL, log4j, commons, slf4j,
        sysout:{level} (ie, sysout:DEBUG)
        if you are having trouble using normal levels use sysout:DEBUG
        (default WARN) -->
        <init-param>
            <param-name>logLevel</param-name>
            <param-value>WARN</param-value>
        </init-param>

        <!-- you can change status path so that it does not
        conflict with your installed apps (note, defaults
        to /rewrite-status) note, must start with / -->
        <init-param>
            <param-name>statusPath</param-name>
            <param-value>/rewrite-status</param-value>
        </init-param>

        <!-- you can disable status page if desired
        can be: true, false (default true) -->
        <init-param>
            <param-name>statusEnabled</param-name>
            <param-value>false</param-value>
        </init-param>

        <!-- you may want to allow more hosts to look at the status page
        statusEnabledOnHosts is a comma delimited list of hosts, * can
        be used as a wildcard (defaults to "localhost, local, 127.0.0.1") -->
        <init-param>
            <param-name>statusEnabledOnHosts</param-name>
            <param-value>localhost,www.okmindmap.com,211.43.12.23</param-value>
        </init-param>


        <!-- defaults to false. use mod_rewrite style configuration file (if this is true and confPath
        is not specified confPath will be set to /WEB-INF/.htaccess) -->
		<!--
        <init-param>
            <param-name>modRewriteConf</param-name>
            <param-value>false</param-value>
        </init-param>
		-->

        <!-- load mod_rewrite style configuration from this parameter's value.
                note, Setting this parameter will mean that all other conf parameters are ignored.
            <init-param>
                <param-name>modRewriteConfText</param-name>
                <param-value>
                    RewriteRule ^/~([^/]+)/?(.*) /u/$1/$2 [R]
                    RewriteRule ^/([uge])/([^/]+)$ /$1/$2/ [R]
                </param-value>
            </init-param>
        -->

        <!-- defaults to false. allow conf file to be set by calling /rewrite-status/?conf=/WEB-INF/urlrewrite2.xml
                designed to be used for testing only
            <init-param>
                <param-name>allowConfSwapViaHttp</param-name>
                <param-value>false</param-value>
            </init-param>
        -->
    </filter>
    <filter-mapping>
        <filter-name>UrlRewriteFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>



	<filter>
		<filter-name>ExpiresFilter</filter-name>
		<filter-class>bnegrao.filters.ExpiresFilter</filter-class>
		<init-param>
			<param-name>ExpiresByType text/cache-manifest</param-name>
			<param-value>access plus 0 minutes</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>ExpiresFilter</filter-name>
		<url-pattern>/*</url-pattern>
		<dispatcher>REQUEST</dispatcher>
	</filter-mapping>
	
	<filter>
		<filter-name>LTIProviderFilter</filter-name>
		<filter-class>com.okmindmap.filter.LTIProviderFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>LTIProviderFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	
<!-- 	
 	<filter>
        <filter-name>springSessionRepositoryFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>springSessionRepositoryFilter</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
    	<dispatcher>ERROR</dispatcher>
    </filter-mapping>
	 -->
	 
	<!-- 
	<filter>
		<filter-name>NoCacheFilter</filter-name>
        <filter-class>com.okmindmap.filter.NoCacheFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>NoCacheFilter</filter-name>
		<url-pattern>*.js</url-pattern>
	</filter-mapping>
	 -->

	<!--
	listener
	Configures the properties of an application listener bean 
	-->
	<!--
	<listener>
	   <listener-class>uk.co.datadisk.listeners.ExampleListener</listener-class>
	</listener>
	-->


	<!--
	ejb-local-ref
	Declares a reference to the Enterprise bean's (EJB) local home  
	-->


	<!--
	ejb-ref
	Declares the references to the JB's home  
	-->
	<!--
	<ejb-ref>
	  <description>some description</description>
	  <ejb-ref-name>Employee Bean</ejb-ref-name>
	  <ejb-ref-type>EmployeeBean</ejb-ref-type>
	  <home>com.foobar.employee.EmployeeHome</home>
	  <remote>com.foobar.employee.Employee</remote>
	</ejb-ref>
	-->


	<!--
	env-entry
	Declares the Web applications environment entries  
	-->
	<!--
	<env-entry>
	  <description>some description</description>
	  <env-entry-name>MinimumValue</env-entry-name>
	  <env-entry-value>5</env-entry-value>
	  <env-entry-type>java.lang.Integer</env-entry-value>
	</env-entry>

	Note: in the java code you would use something like below to obtain the value 

	/* Obtain the initial context */
	Context initCtx = new InitialContext();
	Context envCtx = (Context) initCtx.lookup("java:comp/env");
	/* Lookup environment entry */ 
	Integer minValue = (Integer) envCtx.lookup("MinimumValue"); 
	-->


	<!--
	error-page
	Defines a mapping between an error code or exception and an error page  
	-->
	<!-- <error-page>
	  <error-code>400</error-code>
	  <location>/errors/ERROR400.jsp</location>
	</error-page>
	<error-page>
	  <error-code>403</error-code>
	  <location>/errors/ERROR403.jsp</location>
	</error-page>
	<error-page>
	  <error-code>404</error-code>
	  <location>/errors/ERROR404.jsp</location>
	</error-page>
	<error-page>
	  <error-code>500</error-code>
	  <location>/errors/ERROR500.jsp</location>
	</error-page>
	<error-page>
	  <error-code>503</error-code>
	  <location>/errors/ERROR503.jsp</location>
	</error-page> -->
	
	<!-- wedorang err page mdf - -->
	<error-page>
	  <error-code>400</error-code>
	  <location>/jsp/error/index.jsp</location>
	</error-page>
	<error-page>
	  <error-code>403</error-code>
	  <location>/jsp/error/index.jsp</location>
	</error-page>
	<error-page>
	  <error-code>404</error-code>
	  <location>/jsp/error/index.jsp</location>
	</error-page>
	<error-page>
	  <error-code>500</error-code>
	  <location>/jsp/error/index.jsp</location>
	</error-page>
	<error-page>
	  <error-code>503</error-code>
	  <location>/jsp/error/index.jsp</location>
	</error-page>
	
	<!-- 
	<error-page>
	  <error-code>java.lang.NullPointerException</error-code>
	  <location>/errors/badcode.jsp</location>
	</error-page>
	 -->


	<!--
	jsp-config
	Specifies global configuration properties for the JSP pages in the Web app  
	-->
	<!--
	<jsp-config>
	  ...
	  <taglib>
		<taglib-uri>http://jakarta.apache.org/tomcat/examples-taglib</taglib-uri>
		taglib-location>/WEB-INF/jsp/example-taglib.tld</taglib-location>
	  </taglib>
	  ...
	  <jsp-property-group>
		 <description>some description</description>
		 <display-name>JSP Configuration</display-name>
		 <url-pattern>/jsp2/misc/config.jsp</url-pattern>
		 <el-ignored>true</el-ignored>
		 <page-encoding>ISO-8859-1</page-encoding>
		 <scripting-invalid>true</scripting-invalid>
		 <include-prelude>/jsp2/misc/prelude.jspf</include-prelude>
		 <include-coda>/jsp2/misc/coda.jspf</include-coda>
	  </jsp-property-group>
	</jsp-config>
	-->


	<!--
	locale-encoding-mapping-list
	Specifies the mapping between locales and their encoding  
	-->
	<!--
	<locale-encoding-mapping-list>
	  <locale-encoding-mapping>
		<locale>en</locale>
		  <encoding>en_US</encoding>
	  </locale-encoding-mapping>
	</locale-encoding-mapping-list>
	-->


	<!--
	login-config
	Specifies the authentication methods to be used for accessing the Web application  
	-->
	<!--
	<login-config>
	  <auth-method>FORM</auth-method>
	  <realm-name>MemoryRealm</realm-name> 
	  <form-login-config>
		<form-login-page>login.jsp</form-login-page>
		<form-error-page>notAuthenticated.jsp</form-error-page>
	  </form-login-config>
	</login-config>
	-->

	<!--
	message-destination
	Specifies a message destination 
	-->


	<!--
	message-destination-ref
	Contains the deployment components reference to a message destination 
	-->


	<!--
	resource-env-ref
	Contains a reference to an administered object associated with a resource  
	-->


	<!--
	resource-ref
	Contains a reference to an external resource  
	-->
	<!--
	<resource-ref>
	  <res-ref-name>mail/Session</res-ref-name>
	  <res-type>javax.mail.Session</res-type>
	  <res-auth>Container<res-auth>
	</resource-ref> 
	-->

	<!--
	security-constraint
	Specifies security constraints for one or more groups of web resources  
	-->
	<!--
	<security-constraint>
	  <display-name>Name String</display-name>
	  <web-resource-collection>
		<web-resource-name>GETServlet</web-resource-name>
		<description>some description</description>
		<url-pattern>/servlet/*</url-pattern>
		<http-method>GET</http-method>
	  </web-resource-collection>
	  <auth-constraint>
		<description>some description</description>
		<role-name>*</role-name>
	  </auth-constraint>
	  <user-data-constraint>
		 <description>some description</description>
		 <transport-guarantee>INTEGRAL</transport-guarantee>
	  </user-data-constraint>
	</security-constraint> 
	-->

	<!--
	security-role
	Defines the security roles used in the security-constraint element  
	-->
	<!--
	<security-role>
	  <description> some description</description>
	  <role-name>administrator</role-name>
	</security-role>
	-->

	<!--
	service-ref
	Contains the reference to a Web service  
	-->

	<!--
	session-config
	Defines the session parameters for the Web application  
	-->

	<session-config>
	  <session-timeout>120</session-timeout>
	</session-config>


<!-- start spring config -->
	<!--
		- Location of the XML file that defines the root application context.
		- Applied by ContextLoaderServlet.
	-->
	<!--
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/dataAccessContext-cubrid.xml /WEB-INF/applicationContext.xml</param-value>
	</context-param>
	-->
	
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>
			/WEB-INF/dataAccessContext-local.xml
			/WEB-INF/applicationContext.xml</param-value>
	</context-param>

	<!--
		- Loads the root application context of this web app at startup,
		- by default from "/WEB-INF/applicationContext.xml".
		- Note that you need to fall back to Spring's ContextLoaderServlet for
		- J2EE servers that do not follow the Servlet 2.4 initialization order.
		-
		- Use WebApplicationContextUtils.getWebApplicationContext(servletContext)
		- to access it anywhere in the web application, outside of the framework.
		-
		- The root context is the parent of all servlet-specific contexts.
		- This means that its beans are automatically available in these child contexts,
		- both for getBean(name) calls and (external) bean references.
	-->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	
	<context-param>
    	<param-name>pservice.config.file.name</param-name>
    	<param-value>/WEB-INF/config.properties</param-value>
    </context-param>
    
	<listener>
    	<listener-class>com.okmindmap.context.ContextDeployment</listener-class>
    </listener>
	
	<servlet>
		<servlet-name>mindmap</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<servlet-mapping>
		<servlet-name>mindmap</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
<!-- end spring config -->

<!--  -->
	<servlet>
		<servlet-name>map-invoker</servlet-name>
		<!-- display-name>Map Servlet</display-name -->
		<servlet-class>com.okmindmap.servlet.MapServlet</servlet-class>
	</servlet>

	<servlet-mapping>
		<servlet-name>map-invoker</servlet-name>
		<url-pattern>/map</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>export-invoker</servlet-name>
		<!-- display-name>Map Servlet</display-name -->
		<servlet-class>com.okmindmap.servlet.ExportServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>export-invoker</servlet-name>
		<url-pattern>/export</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>export-user-data-invoker</servlet-name>
		<servlet-class>com.okmindmap.servlet.ExportUserDataServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>export-user-data-invoker</servlet-name>
		<url-pattern>/export-zip-maps</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>svg-invoker</servlet-name>
		<servlet-class>com.okmindmap.servlet.SVGServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>svg-invoker</servlet-name>
		<url-pattern>/svg</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>text-invoker</servlet-name>
		<servlet-class>com.okmindmap.servlet.TEXTServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>text-invoker</servlet-name>
		<url-pattern>/text</url-pattern>
	</servlet-mapping>
	
	<servlet>
		<servlet-name>png-invoker</servlet-name>
		<servlet-class>com.okmindmap.servlet.convertBaseForPngServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>png-invoker</servlet-name>
		<url-pattern>/convertBaseForPng</url-pattern>
	</servlet-mapping>


	<jsp-config>
		<taglib>
			<taglib-uri>/spring</taglib-uri>
			<taglib-location>/WEB-INF/tld/spring-form.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>/okmindmap</taglib-uri>
			<taglib-location>/WEB-INF/tld/okmindmap.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>/bitly</taglib-uri>
			<taglib-location>/WEB-INF/tld/bitly.tld</taglib-location>
		</taglib>
		<taglib>
			<taglib-uri>/enventry</taglib-uri>
			<taglib-location>/WEB-INF/tld/enventry.tld</taglib-location>
		</taglib>
	</jsp-config>
	

    <!-- i18n for Javascript -->
    <servlet>
        <servlet-name>AcceptLanguage</servlet-name>
        <servlet-class>org.espressive.AcceptLanguage</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>AcceptLanguage</servlet-name>
        <url-pattern>/AcceptLanguage</url-pattern>
    </servlet-mapping>
	<servlet>
        <servlet-name>jcaptcha</servlet-name>
        <servlet-class>com.octo.captcha.module.servlet.image.SimpleImageCaptchaServlet</servlet-class>
    </servlet>
	<servlet-mapping>
		<servlet-name>jcaptcha</servlet-name>
		<url-pattern>/jcaptcha.jpg</url-pattern>
    </servlet-mapping>
	<!--
	mime-mapping
	Defines the mapping between an extension and a MIME type  
	-->
	<mime-mapping>
		<extension>woff</extension>
		<mime-type>application/x-font-woff</mime-type>
	</mime-mapping>
	<mime-mapping>
		<extension>json</extension>
		<mime-type>application/json</mime-type>
	</mime-mapping>
	
	<env-entry> 
		<env-entry-name>versioning</env-entry-name>
		<env-entry-type>java.lang.String</env-entry-type>
		<env-entry-value>20130319</env-entry-value> 
	</env-entry>

	<!--
	welcome-file-list
	Specifies a list of welcome files for a Web application  
	-->
	
	<!--
	위두랑 main / index 이동시 error 페이지 이동 처리를 위한 수정
	-->
	<welcome-file-list>
		<!-- <welcome-file>../index.jsp</welcome-file> -->
		<welcome-file>main.jsp</welcome-file>
		<welcome-file>index.html</welcome-file>
    	<welcome-file>index.htm</welcome-file>
    	<welcome-file>index.php</welcome-file>
	</welcome-file-list>
	
	<!-- <security-constraint>
		<web-resource-collection>
			<web-resource-name>UrlSecurePages</web-resource-name>
			<url-pattern>/index.jsp</url-pattern>
			<url-pattern>/main.jsp</url-pattern>
			<url-pattern>/index.do</url-pattern>
			<url-pattern>/main.do</url-pattern>
		</web-resource-collection>
		<auth-constraint>
			<role-name>nobody</role-name>
		</auth-constraint>
	</security-constraint>	 -->
	
</web-app>
